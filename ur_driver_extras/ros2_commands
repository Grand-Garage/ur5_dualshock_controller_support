ros2 topic pub --once /joint_trajectory_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory 
"{joint_names: [shoulder_pan_joint], 
  points: [
     {positions: [0.64], velocities: [], accelerations: [], effort: [], time_from_start: {sec:4, nanosec: 0}}
  ]}"
  
ros2 topic pub --once /joint_trajectory_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory "{joint_names: [wrist_1_joint], points: [{positions: [0.64], velocities: [], accelerations: [], effort: [], time_from_start: {sec: 4, nanosec: 0}}]}"


ros2 topic pub --once /joint_trajectory_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory  "{joint_names: [shoulder_pan_joint,shoulder_lift_joint,elbow_joint,wrist_1_joint,wrist_2_joint,wrist_3_joint],points: [{positions: [0.785,-1.57,0.785,0.785,0.785,0.785],velocities: [],accelerations: [],effort: [],time_from_start: {sec: 4,nanosec: 0}}]}"


ros2 topic pub --once /joint_trajectory_controller/joint_trajectory trajectory_msgs/msg/JointTrajectory  "{joint_names: [shoulder_lift_joint,elbow_joint,wrist_1_joint,wrist_2_joint,wrist_3_joint],points: [{positions: [-1.57,0.2,0.785,0.785,0.785],velocities: [],accelerations: [],effort: [],time_from_start: {sec: 4,nanosec: 0}}]}"



ros2 topic pub -r 10 /servo_node/delta_twist_cmds geometry_msgs/msg/TwistStamped "{twist: {linear: {x: 1, y: 2, z: 3}, angular: {x: 1, y: 1, z: 1}}}"

### REMINDER: no way to auto header the twist messages through the terminal in ros2, gotta use the module for that (twist stamper)
ros2 topic pub -r 10 /stamper_topic geometry_msgs/msg/Twist "{linear: {x: 0.1, y: 0.2, z: 0.03}, angular: {x: 0.1, y: 0.1, z: 0.1}}"
ros2 topic pub -r 3 /stamper_topic geometry_msgs/msg/Twist "{linear: {x: -0.001, y: -0.002, z: -0.003}, angular: {x: -0.1, y: -0.1, z: -0.1}}"
ros2 topic pub -r 3 /stamper_topic geometry_msgs/msg/Twist "{linear: {x: 0.001, y: 0.002, z: 0.003}, angular: {x: 0.1, y: 0.1, z: 0.1}}"
ros2 run twist_stamper twist_stamper --ros-args -r cmd_vel_in:=/stamper_topic -r cmd_vel_out:=/servo_node/delta_twist_cmds


export CATKIN_WS=~/workspace/ur_ros2_driver/
cd $CATKIN_WS
source install/setup.bash


### ESSENTIAL TO START THE SERVO SERVER
ros2 service call /servo_node/start_servo std_srvs/srv/Trigger {}


### INSTALL THE PYTHON STSUFF WITH SYMLINK TO REDUCE RECOMPILATION 
colcon build --packages-select moveit2_dualshock_controller --symlink-install


### LAUNCH COMMAND WITH ALL OF THE ARGUMENTS
ros2 launch ur_bringup ur_control_servo.launch.py ur_type:=ur5e robot_ip:=192.168.0.102 launch_rviz:=true use_fake_hardware:=true
ros2 run moveit2_dualshock_controller dualshock_controller_node


### NU
ros2 launch ur_bringup ur_control.launch.py ur_type:=ur5e robot_ip:=0.0.0.0 launch_rviz:=tur use_fake_hardware:=true initial_joint_controller:=forward_velocity_controller

ros2 topic pub --once /forward_velocity_controller/commands std_msgs/msg/Float64MultiArray "data: [0., 0., 0., 0., 0., 0.]"
#### DOES NOT WORK ON FAKE HARDWARE: VELOCITY ONLY WORKS ON REAL OR URSIM HARDWARE


ros2 topic pub --once /forward_velocity_controller/commands std_msgs/msg/Float64MultiArray "data: [0.2, 0., 0., 0., 0., 0.]"


ros2 launch ur_bringup ur_control_servo.launch.py ur_type:=ur5e robot_ip:=0.0.0.0 launch_rviz:=true use_fake_hardware:=true initial_joint_controller:=forward_velocity_controller
ros2 run moveit2_dualshock_controller dualshock_controller_node


ros2 launch ur_bringup ur_control_servo.launch.py ur_type:=ur5e robot_ip:=0.0.0.0 launch_rviz:=true use_fake_hardware:=false initial_joint_controller:=forward_velocity_controller

ros2 service call /DS_input_node/set_parameters rcl_interfaces/srv/SetParameters '{parameters:[{name: publish_rate, value:{type:3, double_value:0.8}}] }'
ros2 service call /DS_input_node/set_parameters rcl_interfaces/srv/SetParameters '{parameters:[{name: publish_rate, value:{type: 2, integer_value: 12}}] }'


### ACTUAL
ros2 launch ur_bringup ur_control_servo.launch.py ur_type:=ur5e robot_ip:=192.168.0.102 launch_rviz:=true use_fake_hardware:=false initial_joint_controller:=forward_velocity_controller
ros2 run moveit2_dualshock_controller dualshock_controller_node

# KEEP IN MIND THE FOLLOWING FILES (to be expanded):
/ur_control_servo.launch.py - modified launch file that brings up controls and servo 
/ur_servo.yaml - modified parameters for the servo module
/ur_macro.xacro - make the tool link to correspond to reality (ur_description)
! note down the commit that is used for this build. The newest github version doesn't work.
